// Online C++ compiler to run C++ program online
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
void dfs(vector<vector<int>>&adj,vector<int>&visited,int node){
    visited[node]=1;
    cout<<node<<" ";
    
    for(auto i:adj[node]){
        if(visited[i]==0){
            dfs(adj,visited,i);
        }
    }
}
void bfs(vector<vector<int>>&adj,vector<int>&visited,int node){
    queue<int>q;
    q.push(node);
    visited[node] = 1;
    while(!q.empty()){
        int s=q.size();
        while(s--){
            int fro=q.front();
            cout<<fro<<" ";
        
            q.pop();
            for(auto i:adj[fro]){
                if(visited[i]==0){
                    q.push(i);
                    visited[i]=1;
                }
            }
        }
    }
    cout<<"connected here"<<endl;
}
int main() {
    int n=5;
    vector<vector<int>>adj(n);
    vector<int>visited(n,0);
    int edges=5;
    for(int i=0;i<edges;i++){
        cout<<"enter"<<endl;
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
        
    }
    for(int i=0;i<n;i++){
        cout<<i<<"-";
        for(int j=0;j<adj[i].size();j++){
            cout<<adj[i][j]<<" ";
        }
        cout<<endl;
    }
    for(int i=0;i<n;i++){
        if(visited[i]==0){
            dfs(adj,visited,i);
        }
    }
     for(int i=0;i<n;i++){
        if(visited[i]==0){
            bfs(adj,visited,i);
        }
    }
}
