#include <iostream>
#include <queue>
#include <map>
#include <sstream>
using namespace std;

struct Node {
    string keyword;
    string meaning;
    int height;
    Node* left;
    Node* right;

    Node(string k, string m) {
        keyword = k;
        meaning = m;
        height = 1;
        left = nullptr;
        right = nullptr;
    }
};

class AVLTree {
private:
    Node* root;
    int comparisons;
    string rotationInfo;

    int nodeHeight(Node* node) {
        return node ? node->height : 0;
    }

    int getBalanceFactor(Node* node) {
        return nodeHeight(node->left) - nodeHeight(node->right);
    }

    void updateHeight(Node* node) {
        int leftHeight = nodeHeight(node->left);
        int rightHeight = nodeHeight(node->right);
        node->height = 1 + max(leftHeight, rightHeight);
    }

    Node* LLRotation(Node* node) {
        Node* newRoot = node->left;
        node->left = newRoot->right;
        newRoot->right = node;
        updateHeight(node);
        updateHeight(newRoot);
        return newRoot;
    }

    Node* RRRotation(Node* node) {
        Node* newRoot = node->right;
        node->right = newRoot->left;
        newRoot->left = node;
        updateHeight(node);
        updateHeight(newRoot);
        return newRoot;
    }

    Node* LRRotation(Node* node) {
        node->left = RRRotation(node->left);
        return LLRotation(node);
    }

    Node* RLRotation(Node* node) {
        node->right = LLRotation(node->right);
        return RRRotation(node);
    }

    Node* balance(Node* node) {
    updateHeight(node);
    int bf = getBalanceFactor(node);

    if (bf > 1) {
        if (getBalanceFactor(node->left) < 0) {
            if (rotationInfo == "")
                rotationInfo = "LR Rotation performed";
            return LRRotation(node);
        } else {
            if (rotationInfo == "")
                rotationInfo = "LL Rotation performed";
            return LLRotation(node);
        }
    }

    if (bf < -1) {
        if (getBalanceFactor(node->right) > 0) {
            if (rotationInfo == "")
                rotationInfo = "RL Rotation performed";
            return RLRotation(node);
        } else {
            if (rotationInfo == "")
                rotationInfo = "RR Rotation performed";
            return RRRotation(node);
        }
    }

    return node;
}

    Node* insertNode(Node* node, string keyword, string meaning) {
        comparisons++;

        if (!node)
            return new Node(keyword, meaning);

        if (keyword < node->keyword)
            node->left = insertNode(node->left, keyword, meaning);
        else if (keyword > node->keyword)
            node->right = insertNode(node->right, keyword, meaning);
        else {
            node->meaning = meaning; // Update existing
            return node;
        }

        return balance(node);
    }

    Node* minValueNode(Node* node) {
        while (node->left)
            node = node->left;
        return node;
    }

    Node* deleteNode(Node* node, string keyword) {
        comparisons++;

        if (!node)
            return nullptr;

        if (keyword < node->keyword)
            node->left = deleteNode(node->left, keyword);
        else if (keyword > node->keyword)
            node->right = deleteNode(node->right, keyword);
        else {
            if (!node->left || !node->right) {
                Node* temp = node->left ? node->left : node->right;
                delete node;
                return temp;
            } else {
                Node* temp = minValueNode(node->right);
                node->keyword = temp->keyword;
                node->meaning = temp->meaning;
                node->right = deleteNode(node->right, temp->keyword);
            }
        }

        return balance(node);
    }

    Node* searchNode(Node* node, string keyword) {
        comparisons++;

        if (!node)
            return nullptr;

        if (keyword == node->keyword)
            return node;

        if (keyword < node->keyword)
            return searchNode(node->left, keyword);

        return searchNode(node->right, keyword);
    }

    void inorderTraversal(Node* node) {
        if (!node)
            return;
        inorderTraversal(node->left);
        cout << node->keyword << ": " << node->meaning << endl;
        inorderTraversal(node->right);
    }

public:
    AVLTree() {
        root = nullptr;
    }

    void insert(string keyword, string meaning) {
    comparisons = 0;
    rotationInfo = "";
    root = insertNode(root, keyword, meaning);
    cout << "Comparisons during insert: " << comparisons << endl;
    if (rotationInfo != "")
        cout << rotationInfo << endl;
    else
        cout << "No rotation" << endl;
    BFS();
}

    void remove(string keyword) {
        comparisons = 0;
        rotationInfo = "No rotation";
        root = deleteNode(root, keyword);
        cout << "Comparisons during delete: " << comparisons << endl;
        cout << rotationInfo << endl;
        BFS();
    }

    void search(string keyword) {
        comparisons = 0;
        Node* result = searchNode(root, keyword);
        cout << "Comparisons during search: " << comparisons << endl;
        if (result)
            cout << "Keyword found: " << result->keyword << " -> " << result->meaning << endl;
        else
            cout << "Keyword not found.\n";
    }

    void inorder() {
        cout << "\nInorder Traversal (Keyword: Meaning):\n";
        inorderTraversal(root);
    }

    void BFS() {
        cout << "\nBFS (Level Order):\n";
        if (!root) {
            cout << "Tree is empty.\n";
            return;
        }

        queue<pair<Node*, int>> q;
        map<int, vector<string>> levels;
        q.push({root, 0});

        while (!q.empty()) {
            Node* node = q.front().first;
            int level = q.front().second;
            q.pop();

            stringstream ss;
            ss << node->keyword << "(" << node->meaning << ")";
            levels[level].push_back(ss.str());

            if (node->left)
                q.push({node->left, level + 1});
            if (node->right)
                q.push({node->right, level + 1});
        }

        for (auto& level : levels) {
            cout << "Level " << level.first << ": ";
            for (string val : level.second)
                cout << val << "   ";
            cout << endl;
        }
    }
};

// ---------- MAIN FUNCTION ----------
int main() {
    AVLTree tree;
    int choice;
    string keyword, meaning;

    do {
        cout << "\n--- Dictionary Menu ---\n";
        cout << "1. Insert a word\n";
        cout << "2. Delete a word\n";
        cout << "3. Search a word\n";
        cout << "4. Inorder Traversal\n";
        cout << "5. Level Order (BFS)\n";
        cout << "6. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter keyword: ";
                cin >> keyword;
                cout << "Enter meaning: ";
                cin.ignore();
                getline(cin, meaning);
                tree.insert(keyword, meaning);
                break;
            case 2:
                cout << "Enter keyword to delete: ";
                cin >> keyword;
                tree.remove(keyword);
                break;
            case 3:
                cout << "Enter keyword to search: ";
                cin >> keyword;
                tree.search(keyword);
                break;
            case 4:
                tree.inorder();
                break;
            case 5:
                tree.BFS();
                break;
            case 6:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 6);

    return 0;
}
