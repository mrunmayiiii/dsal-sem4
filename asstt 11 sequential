#include <iostream>
#include <fstream>
using namespace std;

class Student {
    int roll, div;
    string name, address;
    
public:
    Student() {
        roll = div = 0;
        name = address = "";
    }

    void display() {
        cout << name << " , " << roll << " , " << div << " , " << address << endl;
    }

    void getData() {
        cout << "Enter name: ";
        getline(cin, name);
        cout << "Enter roll no: ";
        cin >> roll;
        cout << "Enter div: ";
        cin >> div;

        cin.ignore();  
        cout << "Enter address: ";
        getline(cin, address);
    }
    
    friend class MyFile;
};

class MyFile {
    char filename[20];
    fstream file;
    Student S;
    
public:
    MyFile() {
        cout << "Enter filename: ";
        cin >> filename;
        file.open(filename, ios::in | ios::out | ios::app);
        if (!file) {
            cout << "File not found. Creating a new file..." << endl;
            file.open(filename, ios::out | ios::app);
        } else {
            cout << "File opened successfully." << endl;
        }
        file.close();
    }
    
    void addRecord() {
        file.open(filename, ios::app);
        S.getData();
        file.write(reinterpret_cast<char*>(&S), sizeof(S));
        file.close();
    }
    
    void displayRecords() {
        file.open(filename, ios::in);
        file.read(reinterpret_cast<char*>(&S), sizeof(S));
        while (!file.eof()) {
            S.display();
            file.read(reinterpret_cast<char*>(&S), sizeof(S));
        }
        file.close();
    }
    
    void deleteRecord(int roll) {
        file.open(filename, ios::in);
        fstream temp;
        temp.open("temp", ios::out);
        bool found = false;

        file.read(reinterpret_cast<char*>(&S), sizeof(S));
        while (!file.eof()) {
            if (roll == S.roll) {
                cout << "Deleting: ";
                S.display();
                found = true;
            } else {
                temp.write(reinterpret_cast<char*>(&S), sizeof(S));
            }
            file.read(reinterpret_cast<char*>(&S), sizeof(S));
        }

        if (!found) {
            cout << "No such data exists." << endl;
        }

        file.close();
        temp.close();
        remove(filename);
        rename("temp", filename);
    }
};

int main() {
    MyFile File;
    int Choice;
    int R;

    do {
        cout << "\n1: Add a record\n2: Display Database\n3: Delete a record\n4: Exit\nEnter your choice: ";
        cin >> Choice;

        cin.ignore();

        switch (Choice) {
            case 1:
                File.addRecord();
                break;
            case 2:
                File.displayRecords();
                break;
            case 3:
                cout << "Enter the roll number of the record you want to delete: ";
                cin >> R;
                File.deleteRecord(R);
                break;
            case 4:
                cout << "Exiting program." << endl;
                break;
            default:
                cout << "Invalid choice!" << endl;
        }
    } while (Choice != 4);

    return 0;
}
