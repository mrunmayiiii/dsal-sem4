#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    Node *left;
    Node *right;
    int data;

    Node(int d) {
        data = d;
        left = NULL;
        right = NULL;
    }
};

Node* buildTree() {
    cout << "Enter element to be added (-1 for NULL): ";
    int ele;
    cin >> ele;

    if (ele == -1) {
        return NULL;
    }

    Node* newNode = new Node(ele);

    cout << "Enter left child of " << ele << endl;
    newNode->left = buildTree();

    cout << "Enter right child of " << ele << endl;
    newNode->right = buildTree();

    return newNode;
}

void inorderRec(Node *node) {
    if (!node) return;
    inorderRec(node->left);
    cout << node->data << " ";
    inorderRec(node->right);
}

void preorderRec(Node *node) {
    if (!node) return;
    cout << node->data << " ";
    preorderRec(node->left);
    preorderRec(node->right);
}

void postorderRec(Node *node) {
    if (!node) return;
    postorderRec(node->left);
    postorderRec(node->right);
    cout << node->data << " ";
}

void inorderIter(Node* root) {
    stack<Node*> s;
    Node* curr = root;
    while (curr != NULL || !s.empty()) {
        while (curr != NULL) {
            s.push(curr);
            curr = curr->left;
        }
        curr = s.top();
        s.pop();
        cout << curr->data << " ";
        curr = curr->right;
    }
}

void preorderIter(Node* root) {
    if (!root) return;
    stack<Node*> s;
    s.push(root);
    while (!s.empty()) {
        Node* curr = s.top();
        s.pop();
        cout << curr->data << " ";
        if (curr->right) s.push(curr->right);
        if (curr->left) s.push(curr->left);
    }
}

void postorderIter(Node* root) {
    if (!root) return;
    stack<Node*> s1, s2;
    s1.push(root);
    while (!s1.empty()) {
        Node* curr = s1.top();
        s1.pop();
        s2.push(curr);
        if (curr->left) s1.push(curr->left);
        if (curr->right) s1.push(curr->right);
    }
    while (!s2.empty()) {
        cout << s2.top()->data << " ";
        s2.pop();
    }
}

int height(Node *node) {
    if (!node) return 0;
    return max(height(node->left), height(node->right)) + 1;
}

int countLeaves(Node *node) {
    if (!node) return 0;
    if (!node->left && !node->right) return 1;
    return countLeaves(node->left) + countLeaves(node->right);
}

int countInternalNodes(Node *node) {
    if (!node || (!node->left && !node->right)) return 0;
    return 1 + countInternalNodes(node->left) + countInternalNodes(node->right);
}

void erase(Node *node) {
    if (!node) return;
    erase(node->left);
    erase(node->right);
    delete node;
}

void swapChildren(Node *node) {
    if (!node) return;
    swap(node->left, node->right);
    swapChildren(node->left);
    swapChildren(node->right);
}

void mirrorRec(Node *node) {
    if (!node) return;
    swap(node->left, node->right);
    mirrorRec(node->left);
    mirrorRec(node->right);
}

Node* copyTree(Node* root) {
    if (!root) return NULL;
    Node* newNode = new Node(root->data);
    newNode->left = copyTree(root->left);
    newNode->right = copyTree(root->right);
    return newNode;
}

int main() {
    Node* root = buildTree();

    cout << "\nIn-order traversal (Recursive): ";
    inorderRec(root);

    cout << "\nIn-order traversal (Iterative): ";
    inorderIter(root);

    cout << "\nPre-order traversal (Recursive): ";
    preorderRec(root);

    cout << "\nPre-order traversal (Iterative): ";
    preorderIter(root);

    cout << "\nPost-order traversal (Recursive): ";
    postorderRec(root);

    cout << "\nPost-order traversal (Iterative): ";
    postorderIter(root);

    cout << "\nHeight of the tree: " << height(root) - 1;
    cout << "\nNumber of leaf nodes: " << countLeaves(root);
    cout << "\nNumber of internal nodes: " << countInternalNodes(root);

    cout << "\nIn-order before swapping children: ";
    inorderRec(root);
    swapChildren(root);
    cout << "\nIn-order after swapping children: ";
    inorderRec(root);

    cout << "\nIn-order before mirroring: ";
    inorderRec(root);
    mirrorRec(root);
    cout << "\nIn-order after mirroring: ";
    inorderRec(root);

    Node* copiedTree = copyTree(root);
    cout << "\nIn-order traversal of copied tree: ";
    inorderRec(copiedTree);

    erase(root);
    cout << "\nIn-order after erasing all nodes: ";
    inorderRec(root);

    return 0;
}


