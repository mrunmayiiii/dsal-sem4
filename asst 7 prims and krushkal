#include <bits/stdc++.h>
using namespace std;
void prims(vector<vector<pair<int, int>>>& adj,vector<int>&visited,int node){
    priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>pq;
    
   pq.push({0,{0,-1}});
   int sum=0;
   vector<pair<int,int>>mstedges;
   while(!pq.empty()){
       auto it=pq.top();
       pq.pop();
       int wt=it.first;
       int node=it.second.first;
       int par=it.second.second;
       if(visited[node]==1){
           continue;
       }
       visited[node]=1;
       sum+=wt;
       if(par!=-1){
           mstedges.push_back({par,node});
       }
       for(auto it:adj[node]){
           int adjnode = it.first;
            int wt1 = it.second;
           if(visited[adjnode]!=1){
               pq.push({wt1,{adjnode,node}});
           }
           
       }
       
   }
   cout << "Edges of the Minimum Spanning Tree:" << endl;
for (auto edge : mstedges) {
    cout << edge.first << " - " << edge.second << endl;
}
cout << "Total Weight of MST: " << sum << endl;
}
int main() {
     int n=5;
   vector<vector<pair<int, int>>> adj(n);
    vector<int>visited(n,0);
    int edges=5;
    for(int i=0;i<edges;i++){
        cout<<"enter"<<endl;
        int u,v,w;
       	cin >> u >> v >> w;
	 adj[u].push_back({v, w});
        adj[v].push_back({u, w});
        
    }
  
    prims(adj, visited, 0);
}
