#include <bits/stdc++.h>
using namespace std;

class Solution {
public:

	int spanningTree(int V, vector<vector<int>> adj[]) {
		priority_queue<pair<int, pair<int, int>>,
		               vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;

		vector<int> vis(V, 0);
		// {wt, {node, parent}}
		pq.push({0, {0, -1}});
		int sum = 0;
		vector<pair<int, int>> mstEdges;

		while (!pq.empty()) {
			auto it = pq.top();
			pq.pop();
			int node = it.second.first;
			int wt = it.first;
			int parent = it.second.second;

			if (vis[node] == 1) continue;
			// Add it to the MST
			vis[node] = 1;
			sum += wt;
			if (parent != -1) {
				mstEdges.push_back({parent, node});
			}
			for (auto it : adj[node]) {
				int adjNode = it[0];
				int edW = it[1];
				if (!vis[adjNode]) {
					pq.push({edW, {adjNode, node}});
				}
			}
		}

		// Printing the edges of the MST
		cout << "Edges of the Minimum Spanning Tree:\n";
		for (auto edge : mstEdges) {
			cout << edge.first << " - " << edge.second << endl;
		}
		return sum;
	}
};

int main() {
	int V, E;
	cout << "Enter number of vertices and edges: ";
	cin >> V >> E;

	vector<vector<int>> adj[V];
	cout << "Enter edges (u v w) where u and v are vertices and w is weight:\n";
	for (int i = 0; i < E; i++) {
		int u, v, w;
		cin >> u >> v >> w;
		vector<int> tmp(2);
		tmp[0] = v;
		tmp[1] = w;
		adj[u].push_back(tmp);

		tmp[0] = u;
		tmp[1] = w;
		adj[v].push_back(tmp);
	}

	Solution obj;
	int sum = obj.spanningTree(V, adj);
	cout << "The sum of all the edge weights: " << sum << endl;

	return 0;
}

